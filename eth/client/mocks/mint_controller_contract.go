// Code generated by mockery v2.53.0. DO NOT EDIT.

package mocks

import (
	big "math/big"

	client "github.com/dan13ram/wpokt-validator/eth/client"
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind/v2"

	mock "github.com/stretchr/testify/mock"
)

// MockMintControllerContract is an autogenerated mock type for the MintControllerContract type
type MockMintControllerContract struct {
	mock.Mock
}

type MockMintControllerContract_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMintControllerContract) EXPECT() *MockMintControllerContract_Expecter {
	return &MockMintControllerContract_Expecter{mock: &_m.Mock}
}

// Eip712Domain provides a mock function with given fields: opts
func (_m *MockMintControllerContract) Eip712Domain(opts *bind.CallOpts) (client.DomainData, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for Eip712Domain")
	}

	var r0 client.DomainData
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (client.DomainData, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) client.DomainData); ok {
		r0 = rf(opts)
	} else {
		r0 = ret.Get(0).(client.DomainData)
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMintControllerContract_Eip712Domain_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Eip712Domain'
type MockMintControllerContract_Eip712Domain_Call struct {
	*mock.Call
}

// Eip712Domain is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *MockMintControllerContract_Expecter) Eip712Domain(opts interface{}) *MockMintControllerContract_Eip712Domain_Call {
	return &MockMintControllerContract_Eip712Domain_Call{Call: _e.mock.On("Eip712Domain", opts)}
}

func (_c *MockMintControllerContract_Eip712Domain_Call) Run(run func(opts *bind.CallOpts)) *MockMintControllerContract_Eip712Domain_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *MockMintControllerContract_Eip712Domain_Call) Return(_a0 client.DomainData, _a1 error) *MockMintControllerContract_Eip712Domain_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMintControllerContract_Eip712Domain_Call) RunAndReturn(run func(*bind.CallOpts) (client.DomainData, error)) *MockMintControllerContract_Eip712Domain_Call {
	_c.Call.Return(run)
	return _c
}

// MaxMintLimit provides a mock function with given fields: opts
func (_m *MockMintControllerContract) MaxMintLimit(opts *bind.CallOpts) (*big.Int, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for MaxMintLimit")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (*big.Int, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) *big.Int); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMintControllerContract_MaxMintLimit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'MaxMintLimit'
type MockMintControllerContract_MaxMintLimit_Call struct {
	*mock.Call
}

// MaxMintLimit is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *MockMintControllerContract_Expecter) MaxMintLimit(opts interface{}) *MockMintControllerContract_MaxMintLimit_Call {
	return &MockMintControllerContract_MaxMintLimit_Call{Call: _e.mock.On("MaxMintLimit", opts)}
}

func (_c *MockMintControllerContract_MaxMintLimit_Call) Run(run func(opts *bind.CallOpts)) *MockMintControllerContract_MaxMintLimit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *MockMintControllerContract_MaxMintLimit_Call) Return(_a0 *big.Int, _a1 error) *MockMintControllerContract_MaxMintLimit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMintControllerContract_MaxMintLimit_Call) RunAndReturn(run func(*bind.CallOpts) (*big.Int, error)) *MockMintControllerContract_MaxMintLimit_Call {
	_c.Call.Return(run)
	return _c
}

// SignerThreshold provides a mock function with given fields: opts
func (_m *MockMintControllerContract) SignerThreshold(opts *bind.CallOpts) (*big.Int, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for SignerThreshold")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (*big.Int, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) *big.Int); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMintControllerContract_SignerThreshold_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SignerThreshold'
type MockMintControllerContract_SignerThreshold_Call struct {
	*mock.Call
}

// SignerThreshold is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *MockMintControllerContract_Expecter) SignerThreshold(opts interface{}) *MockMintControllerContract_SignerThreshold_Call {
	return &MockMintControllerContract_SignerThreshold_Call{Call: _e.mock.On("SignerThreshold", opts)}
}

func (_c *MockMintControllerContract_SignerThreshold_Call) Run(run func(opts *bind.CallOpts)) *MockMintControllerContract_SignerThreshold_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *MockMintControllerContract_SignerThreshold_Call) Return(_a0 *big.Int, _a1 error) *MockMintControllerContract_SignerThreshold_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMintControllerContract_SignerThreshold_Call) RunAndReturn(run func(*bind.CallOpts) (*big.Int, error)) *MockMintControllerContract_SignerThreshold_Call {
	_c.Call.Return(run)
	return _c
}

// ValidatorCount provides a mock function with given fields: opts
func (_m *MockMintControllerContract) ValidatorCount(opts *bind.CallOpts) (*big.Int, error) {
	ret := _m.Called(opts)

	if len(ret) == 0 {
		panic("no return value specified for ValidatorCount")
	}

	var r0 *big.Int
	var r1 error
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) (*big.Int, error)); ok {
		return rf(opts)
	}
	if rf, ok := ret.Get(0).(func(*bind.CallOpts) *big.Int); ok {
		r0 = rf(opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*big.Int)
		}
	}

	if rf, ok := ret.Get(1).(func(*bind.CallOpts) error); ok {
		r1 = rf(opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMintControllerContract_ValidatorCount_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ValidatorCount'
type MockMintControllerContract_ValidatorCount_Call struct {
	*mock.Call
}

// ValidatorCount is a helper method to define mock.On call
//   - opts *bind.CallOpts
func (_e *MockMintControllerContract_Expecter) ValidatorCount(opts interface{}) *MockMintControllerContract_ValidatorCount_Call {
	return &MockMintControllerContract_ValidatorCount_Call{Call: _e.mock.On("ValidatorCount", opts)}
}

func (_c *MockMintControllerContract_ValidatorCount_Call) Run(run func(opts *bind.CallOpts)) *MockMintControllerContract_ValidatorCount_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(*bind.CallOpts))
	})
	return _c
}

func (_c *MockMintControllerContract_ValidatorCount_Call) Return(_a0 *big.Int, _a1 error) *MockMintControllerContract_ValidatorCount_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMintControllerContract_ValidatorCount_Call) RunAndReturn(run func(*bind.CallOpts) (*big.Int, error)) *MockMintControllerContract_ValidatorCount_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMintControllerContract creates a new instance of MockMintControllerContract. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMintControllerContract(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMintControllerContract {
	mock := &MockMintControllerContract{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
